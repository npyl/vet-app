// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//
//  Appointments:
//    - a User can have many appointments
//    - an appointment can only be connected to one User
//
//    - a Pet can have many appointments
//    - an appointment can only be connected to one Pet
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserType {
  VET // ...
  USER // normal user (less options)
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  password        String
  avatar          String
  type            UserType @default(USER)

  token           String? @unique

  pets            Pets[]

  // User's working hours (Only a vet should have workingHours) 
  workingHours    WorkingHours?
  appointments    Appointment[]
}

model Pets {
  id              Int     @id @default(autoincrement())
  name            String  @db.VarChar(16)
  photo           String
  age             Int
  weight          Int
  gender          String
  type            String  @db.VarChar(16)
  race            String  @db.VarChar(16)
  birthday        String
  color           String  @db.VarChar(16)
  secondary_color String  @db.VarChar(16)
  microchip_date  String
  neutered        Boolean
  dead            Boolean
  blood_type      String  @db.VarChar(16)
  passport        Boolean
  notes           String
  therapy_notes   String

  // INFO: each pet has an owner (user or vet)
  ownerId         Int
  owner           User    @relation(fields: [ownerId], references: [id])

  // INFO: each pet can have appointments.
  appointments    Appointment[]
}

model WorkingHours {
  id Int @id @default(autoincrement())

  monday    Int[]
  tuesday   Int[]
  wednesday Int[]
  thursday  Int[]
  friday    Int[]

  // One-to-one relationship between User and WorkingHours
  vet      User @relation(fields: [vetId], references: [id])
  vetId    Int  @unique
}

model Appointment {
  id      Int @id @default(autoincrement())

  vetId   Int
  vet     User @relation(fields: [vetId], references: [id])

  petId   Int
  pet     Pets @relation(fields: [petId], references: [id])

  date    String
}